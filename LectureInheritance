using System;

namespace Inheritance_Lecture //code from Ch10 lecture of intro C#
{
	class Program
	{
		static void Main(string[] args)
		{
// ************************************* Part 1 : EXTENDING CLASSES (Inheritance) ************************************** 

			var employee = new Employee();
			employee.DoWork();
			Console.WriteLine();

			// Base/Parent/Super Class = Employee
			// Extended/Child/Sub Class = SoftwareDeveloper

			var dev = new SoftwareDeveloper();
			dev.DoWork(); //dev can access DoWork from Employee
			dev.WriteCode(); //dev can access WriteCode from SoftwareDeveloper
			Console.WriteLine();

// ************************************* Part 2 : OVERRIDING BASE CLASS MEMBERS **************************************** 

			/* Override - Required to extend or modify the abstract or virtual implementation of an
			               inherited method, property, indexer, or event. (CHILD CLASS)
			   Virtual  - Used to modify a method, property, indexer, or event declaration 
						   and allow for it to be overridden in a derived class. 
						   For example, this method can be overridden by any class that inherits it
						   When a virtual method is invoked, the run-time type of the object
			               is checked for an overriding member (PARENT CLASS)
			   You cannot override a non-virtual or static method. */

			var auto = new Auto
			{
				Make = "Mini",
				Model = "Cooper",
				Year = 2021,
			};

			auto.Drive();

			var truck = new Truck()
			{
				Make = "Toyota", //make, model, and year all from parent Auto class
				Model = "Tundra",
				Year = 2004,
				TowingCapacity = 1000 //unique to truck child class
			};

			truck.Drive();
			truck.Tow();

			Console.WriteLine("***************");

			DoDrive(auto); //another way to get the same console output
			DoDrive(truck);

			Console.WriteLine();

// *********************************** Part 3 : CREATING & USING ABSTRACT CLASSES ************************************** 

		/* Virtual methods have an implementation & provide the derived classes with the option of overriding it. 
		   Abstract methods do NOT provide an implementation & force the derived classes to override the method.
		   Abstract methods have no actual code in them, and subclasses HAVE TO override the method. 
		   Virtual methods can have code, which is usually a default implementation of something, 
		   and any subclasses CAN override the method using the override modifier and provide a custom implementation. */

			var cat = new Cat();
			cat.Walk();  //implementation in Cat Class
			cat.Feed();  //implementation in Base Class (Animal)

			var dog = new Dog();
			dog.Walk();  
			dog.Feed();

            Console.WriteLine();

// *********************************************** Part 4 : INTERFACES *************************************************

			/* An interface defines a contract. 
			   Any class/struct that implements that contract must provide an implementation of the members defined in the interface
			   Used For Dependency Injection (Advanced Topic)
			   Used When you want two fundamentally differnt classes to act Polymorphically (share behavior) */

			// Declare an interface instance
			// ISampleInterface obj = new ImplementationClass(); -- always start with I for interface!
			ImplementationClass obj = new ImplementationClass();

			// Call the member
			obj.SampleMethod();

			// creating an instance of Bicycle  
			// doing some operations  
			Bicycle bicycle = new Bicycle();
			bicycle.changeGear(5);
			bicycle.speedUp(3);
			bicycle.applyBrakes(1);

			Console.WriteLine("Bicycle present state :");
			bicycle.printStates();

			// creating instance of car
			Car car = new Car();
			car.changeGear(1);
			car.speedUp(4);
			car.applyBrakes(3);

			Console.WriteLine("Car present state :");
			car.printStates();
		}

// ************************************* Part 5 : ABSTRACT CLASSES VS INTERFACES *************************************** 
      /*
		An Abstract class is a way to achieve the abstraction in C#. They are never intended to be instantiated directly. 
		This class must contain at least one abstract method, which is marked by the keyword or modifier abstract in the class definition. 
		The Abstract classes are typically used to define a base class in the class hierarchy.
		Generally, we use abstract class at the time of inheritance.
		A user must use the override keyword before the method which is declared as abstract in child class, 
			the abstract class is used to inherit in the child class.
		It can contains constructors.
		It can implement functions with non-Abstract methods.
		It cannot support multiple inheritance.
		It can’t be static.
		Like a class, Interfaces can have methods, properties, events, and indexers as its members. 
		But interfaces will contain only the declaration of the members. 
		The implementation of interface’s members will be given by the class who implements the interface implicitly or explicitly.	
			
		Advantage of Interface:
		  * It is used to achieve loose coupling.
		  * It is used to achieve total abstraction.
		  * To achieve component-based programming
		  * To achieve multiple inheritance and abstraction.
		  * Interfaces add a plug and play like architecture into applications.
	   */

		private static void DoDrive(Auto a)
		{
			a.Drive();
		}
	}

	class Auto
	{
		public string Make { get; set; }
		public string Model { get; set; }
		public int Year { get; set; }

		public virtual void Drive() //add virtual so the child Truck class can override this method!
		{
			Console.WriteLine($"The {Year} {Make} {Model} is driving.");
		}
	}

	class Truck : Auto
	{
		public int TowingCapacity { get; set; }
		public int CargoSize { get; set; }

		public override void Drive() //overrides the Drive method from the parent Auto class
		{
			Console.WriteLine($"The {Year} {Make} {Model} is hauling.");
		}

		public void Tow()
		{
			Console.WriteLine($"Now we're towing {TowingCapacity} pounds!");
		}
	}

	//*********************
	abstract class Animal //declare base class as abstract
	{ 
		public abstract void Walk(); //declare method as abstract
		public void Feed()
		{
			Console.WriteLine("Time to feed the animals...");
		}
	}
	class Cat : Animal //Cat will have squiggles under it until Walk() is implemented & overrided 
	{
		public override void Walk() //overriding the abstract method from the base class
		{
			Console.WriteLine("Cat is Walking...");
		}
	}
	class Dog : Animal
	{
		public override void Walk() //overriding the abstract method from the base class
		{
			Console.WriteLine("Dog is Walking...");
		}
	}

	//*********************
	interface ISampleInterface
	{
		void SampleMethod();
	}
	class ImplementationClass : ISampleInterface
	{
		public void SampleMethod() //like abstract, inherited interfaces have to implement the parent's method(s)
		{
			Console.WriteLine("Do some really cool interface stuff...");
		}
	}

	interface IVehicle
	{
		void changeGear(int a); //I think they all need to be void?
		void speedUp(int a);
		void applyBrakes(int a);
		void washVehicle();
	}
	class Bicycle : IVehicle //class implements interface & its 4 methods
	{
		int speed;
		int gear;

		public void changeGear(int newGear) 
		{
			gear = newGear;
		}
		public void speedUp(int increment)
		{
			speed = speed + increment;
		}
		public void applyBrakes(int decrement)
		{
			speed = speed - decrement;
		}
		public void washVehicle()
		{
			Console.WriteLine("Washing the Bike...");
		}
		public void printStates()
		{
			Console.WriteLine("speed: " + speed + " gear: " + gear);
		}
	}
	class Car : IVehicle
	{
		int speed;
		int gear;

		public void changeGear(int newGear)
		{
			gear = newGear;
		}
		public void speedUp(int increment)
		{
			speed = speed + (increment * 2);
		}
		public void applyBrakes(int decrement)
		{
			speed = speed - decrement;
		}
		public void washVehicle()
		{
			Console.WriteLine("Washing the Car...");
		}
		public void printStates()
		{
			Console.WriteLine("speed: " + speed + " gear: " + gear);
		}
	}

	//*********************
	internal class Employee //parent or base class
	{
		public Employee() { }

		public void DoWork()
		{
			Console.Write("Working");
			Console.WriteLine();
		}
	}
	internal class SoftwareDeveloper : Employee //child class -- child : parent is how you extend a class in C#
	{
		public SoftwareDeveloper() { }

		public void WriteCode()
		{
			Console.WriteLine("Writing C# code!");
			Console.WriteLine();
		}
	}
}
